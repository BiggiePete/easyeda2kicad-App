name: Release Build (Windows)

on:
  push:
    tags:
      - "V*"

env:
  CARGO_TERM_COLOR: always

jobs:
  release-build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build Chrome extension (ez-lcsc-chrome-ex)
        working-directory: ez-lcsc-chrome-ex
        run: |
          npm ci
          npm run build

      - name: Zip Chrome extension
        run: |
          powershell -Command "if (Test-Path chrome-extension.zip) { Remove-Item chrome-extension.zip -Force }; Compress-Archive -Path 'ez-lcsc-chrome-ex/build/*' -DestinationPath 'chrome-extension.zip' -Force"

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build Desktop connector (Windows)
        working-directory: ez-lcsc-desktop-connector
        run: |
          npm ci
          npm run tauri build

      - name: Locate and copy MSI to repo root
        shell: powershell
        run: |
          $msi = Get-ChildItem -Path "ez-lcsc-desktop-connector\src-tauri\target\release\bundle\msi\*.msi" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $msi) { Write-Error "MSI not found"; exit 1 }
          Copy-Item $msi.FullName -Destination "./ez-lcsc-desktop-connector.msi" -Force

      - name: Get or create release (PowerShell)
        id: create_release
        shell: powershell
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $repo = "${{ github.repository }}"
          $tag = "${{ github.ref_name }}"
          $headers = @{ Authorization = "token $env:GITHUB_TOKEN"; Accept = 'application/vnd.github+json' }

          # Try to get existing release by tag
          try {
            $resp = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases/tags/$tag" -Headers $headers -Method Get -ErrorAction Stop
            $uploadUrl = $resp.upload_url
          } catch {
            # Not found -> create
            $body = @{ tag_name = $tag; name = "Release $tag"; body = "Automated release from CI"; draft = $false; prerelease = $false } | ConvertTo-Json
            $resp = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases" -Headers $headers -Method Post -Body $body -ContentType 'application/json'
            $uploadUrl = $resp.upload_url
          }

          if (-not $uploadUrl) { Write-Error "Failed to get or create release"; exit 1 }
          $releaseId = $resp.id
          Write-Output "upload_url=$uploadUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Output "release_id=$releaseId" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Remove existing chrome-extension.zip if present
        shell: powershell
        run: |
          $repo = "${{ github.repository }}"
          $releaseId = "${{ steps.create_release.outputs.release_id }}"
          $name = 'chrome-extension.zip'
          if (-not $releaseId) { Write-Output "No release id available"; exit 0 }
          $headers = @{ Authorization = "token $env:GITHUB_TOKEN"; Accept = 'application/vnd.github+json' }
          $assets = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases/$releaseId/assets" -Headers $headers -Method Get
          foreach ($a in $assets) { if ($a.name -eq $name) { Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases/assets/$($a.id)" -Headers $headers -Method Delete -ErrorAction SilentlyContinue } }

      - name: Upload Chrome extension asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./chrome-extension.zip
          asset_name: chrome-extension.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove existing MSI if present
        shell: powershell
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $repo = "${{ github.repository }}"
          $releaseId = "${{ steps.create_release.outputs.release_id }}"
          $name = 'ez-lcsc-desktop-connector.msi'
          if (-not $releaseId) { Write-Output "No release id available"; exit 0 }
          $headers = @{ Authorization = "token $env:GITHUB_TOKEN"; Accept = 'application/vnd.github+json' }
          $assets = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases/$releaseId/assets" -Headers $headers -Method Get
          foreach ($a in $assets) { if ($a.name -eq $name) { Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases/assets/$($a.id)" -Headers $headers -Method Delete -ErrorAction SilentlyContinue } }

      - name: Upload MSI asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ez-lcsc-desktop-connector.msi
          asset_name: ez-lcsc-desktop-connector.msi
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
