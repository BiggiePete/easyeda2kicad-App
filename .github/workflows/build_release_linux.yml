name: Release Build (Linux)

on:
  push:
    tags:
      - "V*"

env:
  CARGO_TERM_COLOR: always

jobs:
  release-build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build Chrome extension (ez-lcsc-chrome-ex)
        working-directory: ez-lcsc-chrome-ex
        run: |
          npm ci
          npm run build

      - name: Zip Chrome extension
        run: |
          rm -f chrome-extension.zip || true
          zip -r chrome-extension.zip ez-lcsc-chrome-ex/build

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build Desktop connector (Linux)
        working-directory: ez-lcsc-desktop-connector
        run: |
          npm ci
          npm run tauri build

      - name: Locate Linux installer
        id: locate_installer
        run: |
          set -e
          INST=$(find ez-lcsc-desktop-connector/src-tauri/target/release/bundle -type f \( -name "*.deb" -o -name "*.AppImage" -o -name "*.tar.gz" \) | head -n 1)
          if [ -z "$INST" ]; then echo "No installer found"; exit 1; fi
          echo "installer=$INST" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: Automated release from CI
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Chrome extension asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./chrome-extension.zip
          asset_name: chrome-extension.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux installer asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.locate_installer.outputs.installer }}
          asset_name: linux-installer
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
