name: Release Build (Linux)

on:
  push:
    tags:
      - "V*"

env:
  CARGO_TERM_COLOR: always

jobs:
  release-build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build Chrome extension (ez-lcsc-chrome-ex)
        working-directory: ez-lcsc-chrome-ex
        run: |
          npm ci
          npm run build

      - name: Zip Chrome extension
        run: |
          rm -f chrome-extension.zip || true
          zip -r chrome-extension.zip ez-lcsc-chrome-ex/build

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build Desktop connector (Linux)
        working-directory: ez-lcsc-desktop-connector
        run: |
          npm ci
          npm run tauri build

      - name: Locate Linux installer
        id: locate_installer
        run: |
          set -e
          INST=$(find ez-lcsc-desktop-connector/src-tauri/target/release/bundle -type f \( -name "*.deb" -o -name "*.AppImage" -o -name "*.tar.gz" \) | head -n 1)
          if [ -z "$INST" ]; then echo "No installer found"; exit 1; fi
          echo "installer=$INST" >> $GITHUB_OUTPUT

      - name: Get or create release (bash)
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          repo="${{ github.repository }}"
          tag="${{ github.ref_name }}"
          auth_header="Authorization: token $GITHUB_TOKEN"

          # Try to get existing release by tag
          resp=$(curl -sSL -H "$auth_header" "https://api.github.com/repos/$repo/releases/tags/$tag" || true)
          upload_url=$(echo "$resp" | jq -r .upload_url // empty)

          if [ -z "$upload_url" ]; then
            # create release
            body=$(jq -n --arg tag "$tag" --arg name "Release $tag" '{tag_name:$tag, name:$name, body:"Automated release from CI", draft:false, prerelease:false}')
            resp=$(curl -sSL -H "$auth_header" -H "Content-Type: application/json" -d "$body" "https://api.github.com/repos/$repo/releases")
            upload_url=$(echo "$resp" | jq -r .upload_url)
          fi

          if [ -z "$upload_url" ]; then echo "Failed to get or create release"; exit 1; fi
          release_id=$(echo "$resp" | jq -r .id)
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
          echo "release_id=$release_id" >> $GITHUB_OUTPUT

      - name: Remove existing chrome-extension.zip if present
        run: |
          set -e
          repo="${{ github.repository }}"
          release_id="${{ steps.create_release.outputs.release_id }}"
          name="chrome-extension.zip"
          if [ -z "$release_id" ]; then echo "No release id available"; exit 0; fi
          assets=$(curl -sSL -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/releases/$release_id/assets")
          asset_id=$(echo "$assets" | jq -r --arg name "$name" '.[] | select(.name==$name) | .id' | head -n1)
          if [ -n "$asset_id" ]; then curl -sSL -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/releases/assets/$asset_id"; fi

      - name: Upload Chrome extension asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./chrome-extension.zip
          asset_name: chrome-extension.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux installer asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.locate_installer.outputs.installer }}
          asset_name: linux-installer
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
